name: Electron CD

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '**.md'

jobs:
  build:
    strategy:
      matrix:
        os: [macOS-latest, windows-2019, ubuntu-18.04]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      - name: Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Use Node.js 12.x
        uses: actions/setup-node@v2
        with:
          node-version: 12.x
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install npm packages
        run: |
          yarn install

      - name: Publish and Optimize file permission  (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          yarn run build
          yarn run dist
          cd release
          ls *.AppImage | xargs -I{} zip {}.zip {}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      - name: Sign and Publish (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          yarn run build
          yarn run dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: Publish (macOS)
        if: startsWith(matrix.os, 'macOS')
        run: |
          yarn run build
          yarn run dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      - name: Upload temp artifacts
        uses: actions/upload-artifact@v2
        with:
          name: serimon-${{ matrix.os }}
          if-no-files-found: ignore
          path: |
            release/*.exe
            release/*.app
            release/*.dmg
            release/*.zip

  upload:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Tokyo
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY_OF_ARTIFACTS }}
          name: id_rsa
          known_hosts: ${{ secrets.KNOWN_HOSTS_OF_ARTIFACTS }}
          config: |
            Host artifacts.work-robotics.co.jp
              HostName artifacts.work-robotics.co.jp
              User work-robotics
              IdentityFile ~/.ssh/id_rsa
      
      - name: Download tmp artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Upload artifacts
        id: artifacts
        run: |
          tree
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          ARTIFACTS_PATH=github/work-robotics/serimon/builds/$TIMESTAMP

          mkdir -p webconfig
          echo Options Indexes > webconfig/.htaccess
          rsync -apzv "webconfig/" "work-robotics@artifacts.work-robotics.co.jp:${{ secrets.SERVER_BASE_PATH_OF_ARTIFACTS }}/$ARTIFACTS_PATH"

          echo macOS
          RELEASE_MACOS=$(ls artifacts | grep mac)
          ls artifacts/$RELEASE_MACOS
          rsync -apzv "artifacts/$RELEASE_MACOS/" "work-robotics@artifacts.work-robotics.co.jp:${{ secrets.SERVER_BASE_PATH_OF_ARTIFACTS }}/$ARTIFACTS_PATH"

          echo Windows
          RELEASE_WINDOWS=$(ls artifacts | grep windows)
          ls artifacts/$RELEASE_WINDOWS
          rsync -apzv "artifacts/$RELEASE_WINDOWS/" "work-robotics@artifacts.work-robotics.co.jp:${{ secrets.SERVER_BASE_PATH_OF_ARTIFACTS }}/$ARTIFACTS_PATH"

          echo Ubuntu
          RELEASE_UBUNTU=$(ls artifacts | grep ubuntu)
          ls artifacts/$RELEASE_UBUNTU
          rsync -apzv "artifacts/$RELEASE_UBUNTU/" "work-robotics@artifacts.work-robotics.co.jp:${{ secrets.SERVER_BASE_PATH_OF_ARTIFACTS }}/$ARTIFACTS_PATH"

          echo "::set-output name=path::$(echo $ARTIFACTS_PATH)"
          echo "::set-output name=timestamp::$(echo $TIMESTAMP)"

      - name: Delete temp artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            serimon-macOS-latest
            serimon-windows-2019
            serimon-ubuntu-18.04

      - name: Comment success message (Pull Request)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v5
        env:
          MESSAGE: |
            ## Serimon build (${{ steps.artifacts.outputs.timestamp }})
            https://artifacts.work-robotics.co.jp/${{ steps.artifacts.outputs.path }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.MESSAGE
            })

      - name: Comment success message (Push to master branch)
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: actions/github-script@v5
        env:
          SHA: ${{ github.sha }}
          MESSAGE: |
            ## Serimon build (${{ steps.artifacts.outputs.timestamp }})
            https://artifacts.work-robotics.co.jp/${{ steps.artifacts.outputs.path }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: process.env.SHA,
              body: process.env.MESSAGE
            });
